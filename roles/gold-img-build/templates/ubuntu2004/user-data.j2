#cloud-config
autoinstall:
  version: 1
  apt:
    geoip: true
  keyboard: {layout: gb, toggle: 'null', variant: ''}
  locale: en_GB.UTF-8
  ssh:
    allow-pw: {{rootinfo.allow_root_pw | tojson}}
    authorized-keys: {{rootinfo.ssh_authorized_keys | tojson}}
    install-server: true
  storage:
    config:
      - {type: disk, id: disk-sda, ptable: gpt, path: /dev/sda, wipe: superblock-recursive, preserve: false, name: 'root', grub_device: true}
      - {type: partition, number: 1, id: partition-boot, device: disk-sda, size: 1048576, flag: bios_grub, preserve: false}
{% if swap_partition_size is not defined or swap_partition_size|int == 0 %}
      - {type: partition, number: 2, id: partition-root, device: disk-sda, size: {{(packer_info.disk_size|int - 3 - 1) * 1024 * 1024}}, wipe: superblock, flag: '', preserve: false}
      - {type: format, id: format-root, fstype: ext4, volume: partition-root, preserve: false}
      - {type: mount, id: mount-0, device: format-root, path: /}
{% else %}
      - {type: partition, number: 2, id: partition-swap, device: disk-sda, size: {{(swap_partition_size|int) * 1024 * 1024}}, wipe: superblock, flag: swap, preserve: false}
      - {type: partition, number: 3, id: partition-root, device: disk-sda, size: {{(packer_info.disk_size|int - 3 - 1 - swap_partition_size|int) * 1024 * 1024}}, wipe: superblock, flag: '', preserve: false}
      - {type: format, id: format-swap, fstype: swap, volume: partition-swap, preserve: false}
      - {type: format, id: format-root, fstype: ext4, volume: partition-root, preserve: false}
      - {type: mount, id: mount-0, device: format-swap, path: ''}
      - {type: mount, id: mount-0, device: format-root, path: /}
    swap: {swap: 0}
{% endif %}

  user-data:
    runcmd:
        ## Set a background task to wait for cloud-init to finish and then run cloud-init clean.  Allows cloud-init to run again (with a different datasource) when cloning VM.
      - /bin/bash -c "until cloud-init status 2>&1 | grep done; do sleep 0.01; done; /usr/bin/cloud-init clean" &               #TESTING: /bin/bash -c 'until nc -4 -z -v localhost 8081 2>&1 | grep succeeded ; do sleep 1; done; echo hurrah'
        ## Install the cloud-init-vmware-guestinfo cloud-init datasource for subsequent vmware cloning.  Can't do this in late-command, because a restart happens after that, and we end up in this rncmd block, still running the initial autoinstall nocloud datasource.
      - /usr/bin/curl -sSL https://raw.githubusercontent.com/vmware/cloud-init-vmware-guestinfo/master/install.sh | sh -
        ## Reset the machine-id to 0 so it is regenerated at next startup (when it is cloned). This is the default dhcp unique identifier, as well as defining systemd's "ConditionFirstBoot"
      - truncate -s0 /etc/machine-id
    disable_root: false
    power_state: {mode: poweroff}
    users: [{% for user in userinfo %}{{user | tojson}}{% if not loop.last %},{% endif %}{% endfor %}]

  packages:
    - open-vm-tools
    - curl
    - python3-pip

  early-commands:
      ## Block SSH access at the early stage of boot because packer will otherwise connect to it and try to shut down the VM.
    - /usr/sbin/iptables -A INPUT -p tcp --destination-port 22 -j DROP

  late-commands:
      ## Set the admin group to sudo without password
    - TARGET_MOUNT_POINT=/target curtin in-target -- sed -i '/%admin/s/ALL$/NOPASSWD:ALL/' /etc/sudoers
      ## Force the original eth[n] naming convention, so we get predictable interface name for subsequent VM provisioning tooling.
    - TARGET_MOUNT_POINT=/target curtin in-target -- sed -ri 's/^(GRUB_CMDLINE_LINUX\s*=\s*)"(.*?)"$/\1"\2 net.ifnames=0 biosdevname=0"/' /etc/default/grub
    - TARGET_MOUNT_POINT=/target curtin in-target -- /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg
{% if rootinfo.passwd is defined and rootinfo.passwd != "" %}
      ## Set the root password
    - TARGET_MOUNT_POINT=/target curtin in-target -- sed -i 's|^root:[^:]*\(:.*\)$|root:{{rootinfo.passwd}}\1|' /etc/shadow     ## chpasswd -e <<< 'root:{{rootinfo.passwd}}' -- doesn't work due to redirection
{% endif  %}
      ## Force primary NIC to be at the top of the output from 'open-vm-tools guestinfo list' (for future Ansible playbooks)
    - TARGET_MOUNT_POINT=/target curtin in-target -- echo "\n[guestinfo]\nprimary-nics=e*\nlow-priority-nics=vlan*\n" >> /etc/vmware-tools/tools.conf
      ## Set open-vm-tools polling interval to 7s so we get the IP address back faster (default 30s)
    - TARGET_MOUNT_POINT=/target curtin in-target -- echo "poll-interval=7\n" >> /etc/vmware-tools/tools.conf
    - TARGET_MOUNT_POINT=/target curtin in-target -- /usr/bin/apt-get update
    - TARGET_MOUNT_POINT=/target curtin in-target -- /usr/bin/apt-get -y dist-upgrade
    - TARGET_MOUNT_POINT=/target curtin in-target -- /usr/bin/apt-get --purge -y autoremove
    - TARGET_MOUNT_POINT=/target curtin in-target -- /bin/rm -rf /var/cache/apt/*
    - TARGET_MOUNT_POINT=/target curtin in-target -- /bin/rm -rf /var/lib/apt/lists/*
