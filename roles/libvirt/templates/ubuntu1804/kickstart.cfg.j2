#System authorization infomation
auth  --useshadow  --enablemd5 

#Installation media
cdrom

#Use text mode install
text

#Install OS instead of upgrade
install

#Do not configure the X Window System
skipx

#System keyboard
keyboard gb

#System mouse
mouse

#System timezone
timezone --utc Europe/London

#System language
lang en_GB

#Language modules to install
langsupport en_GB

#Firewall configuration
firewall --disabled

#Network information
network --bootproto=dhcp
#network --bootproto=static --ip=192.168.1.16 --netmask=255.255.255.192 --gateway=192.168.1.1 --nameserver=192.168.1.2

#Root password
#rootpw --disabled
rootpw --iscrypted {{ (userinfo | selectattr('name', 'equalto', 'root'))[0].hashed_passwd }}

#Initial user (user with sudo capabilities)
#user dougal --fullname "" --iscrypted --password <crypted_pw>
preseed passwd/make-user boolean false


#Clear the Master Boot Record
zerombr yes

#Partition clearing information
clearpart --all --initlabel

#System bootloader configuration
bootloader --location=mbr

#Disk partitioning
{% if image_config.libvirt.firmware is defined  and  'OVMF' in image_config.libvirt.firmware %}
# preseeding partman partition information
preseed --owner d-i partman-auto/method string regular
preseed --owner d-i partman-auto/expert_recipe 'string gpt-boot-root :: 512 512 512 fat32 $primary{ $iflabel{ gpt } $iflabel{ gpt } $reusemethod{ } method{ efi } format{ } mountpoint{ /boot/efi } . 4000 100000 -1 ext4 $primary{ } method{ format } format{ } use_filesystem{ } filesystem{ ext4 } mountpoint{ / } .'
preseed --owner d-i partman-auto/choose_recipe select gpt-boot-root
preseed --owner d-i partman-basicfilesystems/no_swap boolean false
preseed --owner d-i partman/choose_partition select finish
preseed --owner d-i partman/confirm boolean true
preseed --owner d-i partman/confirm_nooverwrite boolean true
{% else %}
part / --fstype=ext4 --size 4096 --grow
{% endif %}


# Make minimalistic install
preseed pkgsel/ubuntu-standard boolean false
preseed base-installer/install-recommends boolean false
preseed base-installer/kernel/override-image string linux-virtual
preseed pkgsel/install-language-support boolean false

# Policy for applying updates. May be "none" (no automatic updates), "unattended-upgrades" (install security updates automatically), or "landscape" (manage system with Landscape).
preseed pkgsel/update-policy select unattended-upgrades

# Whether to upgrade packages after debootstrap. Allowed values: none, safe-upgrade, full-upgrade
preseed pkgsel/upgrade select full-upgrade

#poweroff/ reboot after installation
poweroff

%packages
efibootmgr
openssh-server
qemu-guest-agent
cloud-guest-utils
cloud-init
curl
python3-pip


%post
## Force the original eth[n] naming convention
sed -ri 's/^(GRUB_CMDLINE_LINUX\s*=\s*)"(.*?)"$/\1"\2 net.ifnames=0 biosdevname=0"/' /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg

## Setup root ssh key
mkdir -p /root/.ssh
chmod 700 /root/.ssh
echo "{{ (userinfo | selectattr('name', 'equalto', 'root'))[0].ssh_authorized_keys | join('\n')}}" > /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys

groupadd admin
sed -i -e '/%admin/s/ALL$/NOPASSWD:ALL/' /etc/sudoers

{% for adminuser in userinfo | selectattr('groups', 'defined') | selectattr('groups', 'search', '\\badmin\\b') | list %}
useradd -m --shell=/bin/bash --groups=admin {% if adminuser.passwd is defined and adminuser.passwd != "" %}--password='{{adminuser.passwd}}'{% endif %} {{adminuser.name}}
{% if adminuser.ssh_authorized_keys is defined and adminuser.ssh_authorized_keys | length>0 %}
mkdir -p ~{{adminuser.name}}/.ssh/
echo "{{adminuser.ssh_authorized_keys | join('\n')}}" > ~{{adminuser.name}}/.ssh/authorized_keys
chown -R {{adminuser.name}}:{{adminuser.name}} ~{{adminuser.name}}/.ssh
{% endif %}
{% endfor %}

{% if image_config.swapfile_mb is defined and image_config.swapfile_mb|int == 0 %}
swapoff -a
sed -i '/^\/swapfile/d' /etc/fstab
rm -f /swapfile
{% endif %}

apt-get update
apt-get --purge -y remove friendly-recovery ntfs-3g plymouth plymouth-theme-ubuntu-text popularity-contest ufw
{% if image_config.remove_snapd is defined and image_config.remove_snapd %}
apt-get --purge -y remove snapd
rm -rf ~/snap /snap /var/snap /var/lib/snapd
{% endif  %}

apt-get -y dist-upgrade
apt-get --purge -y autoremove
rm -f /var/cache/apt/*  /var/lib/apt/lists/*
## Create a file filled with zeroes to occupy the non-zeroed, but deleted free space, so that a 'qemu-img convert' (in packer, where '"skip_compaction": false' is set) can dedpulicate the zeros and shrink the sparse disk.
dd if=/dev/zero of=zero bs=256M; rm zero
## Reset the machine-id to 0 so it is regenerated at next startup (when it is cloned). This is the default dhcp unique identifier, as well as defining systemd's "ConditionFirstBoot"
truncate -s0 /etc/machine-id
truncate -s0 /var/lib/dbus/machine-id
