---

- name: verify host is virt-enabled
  block:
    - name: grep -Eoc '(vmx|svm)' /proc/cpuinfo
      command: grep -Eoc '(vmx|svm)' /proc/cpuinfo
      register: r__command_cpuinfo

    - assert: { that: "r__command_cpuinfo.stdout != 0", msg: "HW virt is not enabled" }

    - name: kvm-ok
      command: kvm-ok
      register: r__command_kvmok

    - assert: { that: "'KVM acceleration can be used' in r__command_kvmok.stdout", msg: "KVM acceleration not enabled" }


- name: run common deploy
  include_role:
    name: _common


- block:
    - name: move the vm to the storage pool
      command: "mv {{image_config.libvirt.storage_pool}}/{{image_name}}/{{image_name}} {{image_filepath}}"
      args: { creates: "{{image_filepath}}" }

    - name: stat {{image_config.libvirt.storage_pool}}/{{image_name}}
      stat: path={{image_config.libvirt.storage_pool}}/{{image_name}}/
      register: r__stat_gcp_storage_pool_image_name

    - name: remove the empty build directory
      command: "rmdir {{image_config.libvirt.storage_pool}}/{{image_name}}/"
      when: r__stat_gcp_storage_pool_image_name.stat.exists|default(False)|bool

    - name: register the VM
      delegate_to: "{{groups['libvirt'][0]}}"
      become: yes
      shell: "echo \"<domain type='kvm'>
        <name>{{image_name}}</name>
        <memory unit='KiB'>2097152</memory>
        <vcpu placement='static'>2</vcpu>
        <os>
          <type arch='x86_64' machine='pc-q35-4.2'>hvm</type>
          {% if image_config.libvirt.firmware is defined and 'OVMF' in image_config.libvirt.firmware %}<loader readonly='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.fd</loader>{% endif %}
        </os>
        <features>
          <acpi/>
          <apic/>
        </features>
        <cpu mode='host-model' check='partial'/>
        <clock offset='localtime'/>
        <devices>
          <emulator>/usr/bin/qemu-system-x86_64</emulator>
          <disk type='file' device='disk'>
            <driver name='qemu' type='qcow2'/>
            <source file='{{image_filepath}}'/>
            <target dev='vda' bus='virtio'/>
          </disk>
          <interface type='direct'>
            <source dev='br0' mode='vepa'/>
            <model type='virtio'/>
          </interface>
          <channel type='unix'>
            <target type='virtio' name='org.qemu.guest_agent.0'/>
            <address type='virtio-serial' controller='0' bus='0' port='1'/>
          </channel>
          <graphics type='vnc' autoport='yes'/>
        </devices>
        </domain>\" | virsh define /dev/stdin"
      register: r__command_virsh_define

    - debug: msg={{r__command_virsh_define}}
  vars:
    image_filepath: "{{image_config.libvirt.storage_pool}}/{{image_name}}.{{image_config.libvirt.fileformat}}"


#- block:
#    - name: check guest_agent response (only valid if guest is running)
#      command: "{{item}}"
#      register: r__command__guest_agent
#      loop:
#        - "virsh qemu-agent-command {{image_name}} '{\"execute\":\"guest-info\"}'"
#        - "virsh qemu-agent-command {{image_name}} '{\"execute\":\"guest-network-get-interfaces\"}'"
#
#    - debug: msg={{r__command__guest_agent}}
