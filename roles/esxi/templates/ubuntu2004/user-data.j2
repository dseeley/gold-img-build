#cloud-config
autoinstall:
  version: 1
  refresh-installer:
    update: yes
  apt:
    geoip: true
  keyboard: {layout: gb, toggle: 'null', variant: ''}
  locale: en_GB.UTF-8
  ssh:
    allow-pw: {{rootinfo.allow_root_pw | tojson}}
    authorized-keys: {{rootinfo.ssh_authorized_keys | tojson}}
    install-server: true
  network:
    network:
      version: 2
      ethernets:
        eth0:
           dhcp4: yes
  storage:
    config:
      - {type: disk, id: disk-sda, ptable: gpt, path: /dev/sda, wipe: superblock-recursive, preserve: false, name: 'root', grub_device: true}
      - {type: partition, number: 1, id: partition-boot, device: disk-sda, size: 1048576, flag: bios_grub, preserve: false}
{% if image_config.swap.file_or_partition == 'file' or image_config.swap.size_mb|int == 0 %}
{#    layout:#}
{#      name: direct#}
      - {type: partition, number: 2, id: partition-root, device: disk-sda, size: {{(image_config.disk_size_mb|int - 3 - 1) * 1024 * 1024}}, wipe: superblock, flag: '', preserve: false}
      - {type: format, id: format-root, fstype: ext4, volume: partition-root, preserve: false}
      - {type: mount, id: mount-0, device: format-root, path: /}
{% else %}
      - {type: partition, number: 2, id: partition-swap, device: disk-sda, size: {{(image_config.swap.size_mb|int) * 1024 * 1024}}, wipe: superblock, flag: swap, preserve: false}
      - {type: partition, number: 3, id: partition-root, device: disk-sda, size: {{(image_config.disk_size_mb|int - 3 - 1 - image_config.swap.size_mb|int) * 1024 * 1024}}, wipe: superblock, flag: '', preserve: false}
      - {type: format, id: format-swap, fstype: swap, volume: partition-swap, preserve: false}
      - {type: format, id: format-root, fstype: ext4, volume: partition-root, preserve: false}
      - {type: mount, id: mount-0, device: format-swap, path: ''}
      - {type: mount, id: mount-0, device: format-root, path: /}
{% endif %}
{% if image_config.swapfile_mb is defined and image_config.swapfile_mb|int > 0 > 0 %}
    swap: {size: {{ image_config.swap.size_mb|int }}}
{% endif %}

  user-data:
    disable_root: false
    power_state: {mode: poweroff}
    users: {{userinfo | tojson}}
    write_files:
      - content: |
          [Unit]
          Description=Gold-image pre-shutdown activities.  clean cloud-init, empty journal, remove self
          Requires=network-online.target network.target dbus.service nss-lookup.target
          After=network-online.target network.target dbus.service nss-lookup.target

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/bin/true
          ExecStop=/bin/bash -c 'until cloud-init status 2>&1 | grep done; do sleep 0.1; done; /usr/bin/cloud-init clean; rm -rf /var/log/journal/*; rm -rf /etc/systemd/system/goldbuildfinish.service'
          TimeoutStopSec=30
          KillMode=none

          [Install]
          WantedBy=multi-user.target
        owner: root:root
        permissions: '0644'
        path: /etc/systemd/system/goldbuildfinish.service
    runcmd:
      - /bin/systemctl daemon-reload
      - /bin/systemctl start goldbuildfinish.service
{#        ## Set a background task to wait for cloud-init to finish and then run cloud-init clean.  Allows cloud-init to run again (with a different datasource) when cloning VM.  -  NOT RELIABLE, race condition.#}
{#      - /bin/bash -c "until cloud-init status 2>&1 | grep done; do sleep 0.01; done; /usr/bin/cloud-init clean" &               #TESTING: /bin/bash -c 'until nc -4 -z -v localhost 8081 2>&1 | grep succeeded ; do sleep 1; done; echo hurrah'#}
        ## Allow future cloud configs to configure the network
      - /bin/rm -f /etc/cloud/cloud.cfg.d/subiquity-disable-cloudinit-networking.cfg /etc/cloud/cloud.cfg.d/99-installer.cfg
        ## Install the cloud-init-vmware-guestinfo cloud-init datasource for subsequent vmware cloning.  Can't do this in late-command, because a restart happens after that, and we end up in this runcmd block, still running the initial autoinstall nocloud datasource.
      - /usr/bin/curl -sSL https://raw.githubusercontent.com/vmware/cloud-init-vmware-guestinfo/master/install.sh | sh -
{% if image_config.remove_snapd is defined and image_config.remove_snapd %}
      - /usr/bin/apt-get -y purge snapd
      - /usr/bin/rm -rf ~/snap /snap /var/snap /var/lib/snapd
{% endif  %}
      - /usr/bin/apt-get -y --purge autoremove
      - /usr/bin/apt-get -y autoclean
      - /bin/rm -rf /var/cache/apt/* /var/lib/apt/lists/*
      ## Create a file filled with zeroes to occupy the non-zeroed, but deleted free space, so that a 'vmkfstools --punchzero disk.vmdk' (or in packer, where '"skip_compaction": false' is set) can shrink the disk to fit.
      - dd if=/dev/zero of=zero bs=256M; rm zero
      ## Reset the machine-id to 0 so it is regenerated at next startup (when it is cloned). This is the default dhcp unique identifier, as well as defining systemd's "ConditionFirstBoot"
      - truncate -s0 /etc/machine-id

  packages:
    - open-vm-tools
    - curl
    - python3-pip

  early-commands:
      ## Block SSH access at the early stage of boot because packer will otherwise connect to it and try to shut down the VM.
    - /usr/sbin/iptables -A INPUT -p tcp --destination-port 22 -j DROP

  late-commands:
    ## Set the admin group to sudo without password
    - curtin in-target -- sed -i '/%admin/s/ALL$/NOPASSWD:ALL/' /etc/sudoers
    ## Force the original eth[n] naming convention, so we get predictable interface name for subsequent VM provisioning tooling.
    - curtin in-target -- sed -ri 's/^(GRUB_CMDLINE_LINUX\s*=\s*)"(.*?)"$/\1"\2 net.ifnames=0 biosdevname=0"/' /etc/default/grub
    ## Add a 2s grub timeout, to allow us to get to boot screen if needed.
    - curtin in-target -- sed -ri 's/^GRUB_TIMEOUT\s*=.*$/GRUB_TIMEOUT=2/' /etc/default/grub
    - curtin in-target -- /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg
{% if rootinfo.passwd is defined and rootinfo.passwd != "" %}
    ## Set the root password. (note: chpasswd -e <<< 'root:{{rootinfo.passwd}}' -- doesn't work due to redirection)
    - curtin in-target -- sed -i 's|^root:[^:]*\(:.*\)$|root:{{rootinfo.passwd}}\1|' /etc/shadow
{% endif  %}
    ## Force primary NIC to be at the top of the output from 'open-vm-tools guestinfo list' (for future Ansible playbooks)
    - curtin in-target -- echo "\n[guestinfo]\nprimary-nics=e*\nlow-priority-nics=vlan*\n" >> /etc/vmware-tools/tools.conf
    ## Set open-vm-tools polling interval to 7s so we get the IP address back faster (default 30s)
    - curtin in-target -- echo "poll-interval=7\n" >> /etc/vmware-tools/tools.conf
    - curtin in-target -- /usr/bin/apt-get update
    - curtin in-target -- /usr/bin/apt-get -y dist-upgrade
{% if image_config.systemd_debug is defined and image_config.systemd_debug %}
    - curtin in-target -- sed -ri 's/^#(LogLevel\s*=\s*).*?/\1debug/' /etc/systemd/system.conf
{% endif  %}
